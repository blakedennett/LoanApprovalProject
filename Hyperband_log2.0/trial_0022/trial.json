{"trial_id": "0022", "hyperparameters": {"space": [{"class_name": "Choice", "config": {"name": "activation", "default": "relu", "conditions": [], "values": ["relu", "tanh", "selu", "elu"], "ordered": false}}, {"class_name": "Int", "config": {"name": "num_layers", "default": null, "conditions": [], "min_value": 1, "max_value": 3, "step": 1, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "layer1", "default": null, "conditions": [], "min_value": 15, "max_value": 315, "step": 30, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "dropout1", "default": 0.0, "conditions": [], "values": [0.0, 0.01, 0.001, 0.0001, 1e-05], "ordered": true}}, {"class_name": "Choice", "config": {"name": "output_activation", "default": "softmax", "conditions": [], "values": ["softmax", "sigmoid", "linear"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "metric", "default": "accuracy", "conditions": [], "values": ["accuracy", "auc", "precision", "recall"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "optimizer", "default": "adam", "conditions": [], "values": ["adam", "sgd", "rmsprop", "Adadelta", "Adafactor", "Adagrad", "Adamax", "Nadam", "Ftrl", "AdamW", "Lion", "Optimizer"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "reduction", "default": "sum", "conditions": [], "values": ["sum", "sum_over_batch_size", "auto", "none"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "learning_rate", "default": 0.1, "conditions": [], "values": [0.1, 0.01, 0.001, 0.0001, 1e-05], "ordered": true}}, {"class_name": "Int", "config": {"name": "layer2", "default": null, "conditions": [], "min_value": 15, "max_value": 315, "step": 30, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "dropout2", "default": 0.0, "conditions": [], "values": [0.0, 0.01, 0.001, 0.0001, 1e-05], "ordered": true}}, {"class_name": "Int", "config": {"name": "layer3", "default": null, "conditions": [], "min_value": 15, "max_value": 315, "step": 30, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "dropout3", "default": 0.0, "conditions": [], "values": [0.0, 0.01, 0.001, 0.0001, 1e-05], "ordered": true}}], "values": {"activation": "selu", "num_layers": 1, "layer1": 105, "dropout1": 0.0, "output_activation": "linear", "metric": "precision", "optimizer": "rmsprop", "reduction": "auto", "learning_rate": 0.0001, "layer2": 15, "dropout2": 1e-05, "layer3": 255, "dropout3": 0.001, "tuner/epochs": 20, "tuner/initial_epoch": 0, "tuner/bracket": 0, "tuner/round": 0}}, "metrics": {"metrics": {}}, "score": null, "best_step": 0, "status": "FAILED", "message": "Traceback (most recent call last):\n  File \"C:\\Users\\Blake Dennett\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\keras_tuner\\engine\\base_tuner.py\", line 270, in _try_run_and_update_trial\n    self._run_and_update_trial(trial, *fit_args, **fit_kwargs)\n  File \"C:\\Users\\Blake Dennett\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\keras_tuner\\engine\\base_tuner.py\", line 235, in _run_and_update_trial\n    results = self.run_trial(trial, *fit_args, **fit_kwargs)\n  File \"C:\\Users\\Blake Dennett\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\keras_tuner\\tuners\\hyperband.py\", line 425, in run_trial\n    return super().run_trial(trial, *fit_args, **fit_kwargs)\n  File \"C:\\Users\\Blake Dennett\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\keras_tuner\\engine\\tuner.py\", line 287, in run_trial\n    obj_value = self._build_and_fit_model(trial, *args, **copied_kwargs)\n  File \"C:\\Users\\Blake Dennett\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\keras_tuner\\engine\\tuner.py\", line 214, in _build_and_fit_model\n    results = self.hypermodel.fit(hp, model, *args, **kwargs)\n  File \"C:\\Users\\Blake Dennett\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\keras_tuner\\engine\\hypermodel.py\", line 144, in fit\n    return model.fit(*args, **kwargs)\n  File \"C:\\Users\\Blake Dennett\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\keras\\src\\utils\\traceback_utils.py\", line 70, in error_handler\n    raise e.with_traceback(filtered_tb) from None\n  File \"c:\\Users\\Blake Dennett\\Downloads\\Summer2023\\NeuralNetwork.py\", line 122, in on_epoch_end\n    f1 = f1_score(y_val, y_pred)\n  File \"C:\\Users\\Blake Dennett\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\sklearn\\metrics\\_classification.py\", line 1136, in f1_score\n    return fbeta_score(\n  File \"C:\\Users\\Blake Dennett\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\sklearn\\metrics\\_classification.py\", line 1277, in fbeta_score\n    _, _, f, _ = precision_recall_fscore_support(\n  File \"C:\\Users\\Blake Dennett\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\sklearn\\metrics\\_classification.py\", line 1563, in precision_recall_fscore_support\n    labels = _check_set_wise_labels(y_true, y_pred, average, labels, pos_label)\n  File \"C:\\Users\\Blake Dennett\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\sklearn\\metrics\\_classification.py\", line 1381, in _check_set_wise_labels\n    raise ValueError(\nValueError: Target is multiclass but average='binary'. Please choose another average setting, one of [None, 'micro', 'macro', 'weighted'].\n"}